---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: html-content
              mountPath: /usr/share/nginx/html
      volumes:
        - name: html-content
          configMap:
            name: frontend-html

---
# ConfigMap for Frontend HTML Content
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-html
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Frontend</title>
        <script>
            async function fetchMessage() {
                const response = await fetch('/api/message');
                const data = await response.json();
                document.getElementById('message').innerText = data.message;
            }

            window.onload = fetchMessage;  // Call the function when the page loads
        </script>
    </head>
    <body>
        <h1>Welcome to the Frontend!</h1>
        <p id="message">Loading message...</p>
    </body>
    </html>

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: 484907523966.dkr.ecr.ap-southeast-1.amazonaws.com/worley-nc-ecr-repo:latest
          ports:
            - containerPort: 5000

---
# Backend Service (ALB Type)
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    app: backend

---
# Frontend Service (ALB Type)
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: frontend

---
# Ingress Resource (ALB) with updated name (ui-k8s-ingress)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ui-ingress # Updated Ingress name
  annotations:
    kubernetes.io/ingress.class: alb # Ensures ALB Ingress Controller is used
    alb.ingress.kubernetes.io/scheme: internet-facing # Makes the ALB public
spec:
  ingressClassName: alb # Ensures ALB ingress class is applied
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80
          - path: /api/*
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 5000
